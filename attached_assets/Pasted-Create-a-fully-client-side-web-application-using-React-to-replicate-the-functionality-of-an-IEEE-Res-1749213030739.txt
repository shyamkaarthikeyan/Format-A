Create a fully client-side web application using React to replicate the functionality of an IEEE Research Paper Generator, originally implemented in Python with Streamlit. The application should allow users to input paper details (title, authors, abstract, keywords, sections, subsections, figures, references, and acknowledgments) and generate downloadable IEEE-formatted Word (.docx) and LaTeX (.tex) documents with identical formatting and structure to the original. The app must run entirely in the browser, using CDN-hosted libraries and client-side processing for document generation, without any server-side dependencies (no Node.js, Express.js, or MongoDB). Below are the detailed requirements:



General Requirements





Objective: Build a single-page React application that runs entirely in the browser, mirroring the functionality of the provided Python/Streamlit IEEE Paper Generator. The app should generate IEEE-formatted Word and LaTeX documents based on user input, with identical formatting to the original.



Frontend: Use React with Tailwind CSS (via CDN) for a responsive, user-friendly interface. Use className instead of class for JSX attributes. Avoid <form> tags with onSubmit due to potential sandbox restrictions; use buttons with event handlers (onClick) instead.



Document Generation:





Generate Word documents using the docx library (via CDN, e.g., docx-js) for client-side .docx creation.



Generate LaTeX files by rendering a template string client-side, based on the provided LATEX_TEMPLATE.



Use the file-saver library (via CDN) to enable browser downloads of generated files.



Dependencies: Use CDN-hosted libraries for all dependencies (e.g., React, React DOM, Tailwind CSS, docx-js, file-saver) from sources like cdn.jsdelivr.net or unpkg.com. Do not rely on npm or server-side packages.



State Management: Use React's useState hook to manage form data in-memory, as no backend storage (e.g., MongoDB) is allowed.



Output: Ensure generated Word and LaTeX documents match the formatting of the original Python code (e.g., fonts, margins, two-column layout, figure sizes).



Functional Requirements





User Interface:





Create a single-page React application with expandable sections (using Tailwind CSS for styling and collapsible components like accordions) for:





Basic Information:





Text input for paper title (help: "Enter the paper title (10–12 words recommended)").



Text area for abstract (height: ~150px, help: "Summarize the paper's purpose, methods, results, and conclusions").



Text input for keywords (help: "e.g., machine learning, IEEE, research (3–5 keywords)").



Footnote Information:





Text inputs for manuscript received date (e.g., "April 27, 2025"), revised date, accepted date, funding (e.g., "National Science Foundation Grant XYZ"), and DOI (e.g., "10.1109/EXAMPLE.2025.123456").



Authors:





Dynamic form to add/remove authors, each with:





Text inputs for name, department, organization, city, state, Tamil Nadu (optional), and a list of custom fields (e.g., email).



Buttons to add/delete authors and custom fields.



Help text for each field (e.g., "e.g., John K. Doe" for name).



Sections and Subsections:





Dynamic form to add/remove sections, each with:





Text input for section title (e.g., "Methodology").



Content blocks (dynamic list of text or image blocks in any order):





Text Block: Text area for content (height: ~100px).



Image Block: File input for PNG/JPEG uploads, text input for caption, select box for size (Very Small: 1.2in, Small: 1.8in, Medium: 2.5in, Large: 3.2in).



Subsections (dynamic list with title and content text area).



Legacy figures (dynamic list with caption, file upload, and size select box, appearing at section end).



Buttons to add/delete content blocks, subsections, and legacy figures.



Help text for fields (e.g., "Describe what the image shows" for captions).



Additional Sections:





Text area for acknowledgments (height: ~100px, help: "Acknowledge funding or contributors").



Dynamic list for references with text input for each (help: "e.g., [1] J. Doe, 'Quantum Teleportation,' IEEE Trans. Quantum Eng., vol. 1, pp. 1-10, 2020").



Buttons to add/delete references.



Provide two buttons at the bottom: "Generate IEEE Paper (Word)" and "Generate IEEE Paper (LaTeX)" to trigger document downloads.



Display validation warnings below relevant fields:





Abstract: Warn if word count is not 150–250 words.



Title and authors: Warn if title is empty or no author names are provided when generating documents.